#!/usr/bin/env python

# This file is part of BPFS. BPFS is copyright 2009-2010 The Regents of the
# University of California. It is distributed under the terms of version 2
# of the GNU GPL. See the file LICENSE for details.

# Print a bpramcount log with function names in place of instruction pointers
# NOTE: addr2line only seems useful when bpfs is compiled with -O0

import subprocess
import sys
import os

bpfs = os.path.dirname(sys.argv[0]) + '/../bpfs'

ap = subprocess.Popen(['addr2line', '-f', '-e', bpfs],
					  stdin=subprocess.PIPE,
					  stdout=subprocess.PIPE)

in_backtraces = False

backtraces = dict()

for line in sys.stdin:
	line = line[:-1]
	if (not in_backtraces):
		if (line == 'write backtraces start:'):
			in_backtraces = True
		if (line.startswith('total number of bytes written: ')):
			sys.stdout.write('# ' + line + '\n');
		continue
	if (in_backtraces and line == 'write backtraces end'):
		in_backtraces = False
		break

	backtrace = []
	
	linelist = line.split()
	nbytes = int(linelist[0])
	ips = linelist[1:]

	for ip in ips:
		ap.stdin.write("%s\n" % ip)
		ap.stdin.flush()
		function = ap.stdout.readline()[:-1]
		fileline = ap.stdout.readline()[:-1].split(':')
		filename = fileline[0]
		filename = filename.split('/')[-1] # just the file, not dirs
		lineno = fileline[1]
		if function == '??' and filename == '??' and lineno == '0':
			backtrace.append(ip)
		else:
			backtrace.append("%s:%s" % (function, lineno))

	backtrace = tuple(backtrace)
	if backtrace in backtraces:
		backtraces[backtrace] += nbytes
	else:
		backtraces[backtrace] = nbytes

def backtrace_sort(x, y):
	if (x[0] > y[0]):
		return 1
	elif x[0] == y[0]:
		return 0
	else:
		return -1

backtraces_list = map(lambda rec: (rec[1], rec[0]), backtraces.iteritems())
backtraces_list.sort(backtrace_sort)
backtraces_list.reverse()

for nbytes, backtrace in backtraces_list:
	line = str(nbytes)
	for elt in backtrace:
		line += ' ' + elt
	print line
